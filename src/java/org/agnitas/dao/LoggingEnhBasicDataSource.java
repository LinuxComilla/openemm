/*********************************************************************************
 * The contents of this file are subject to the Common Public Attribution
 * License Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.openemm.org/cpal1.html. The License is based on the Mozilla
 * Public License Version 1.1 but Sections 14 and 15 have been added to cover
 * use of software over a computer network and provide for limited attribution
 * for the Original Developer. In addition, Exhibit A has been modified to be
 * consistent with Exhibit B.
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific language governing rights and limitations under the License.
 * 
 * The Original Code is OpenEMM.
 * The Original Developer is the Initial Developer.
 * The Initial Developer of the Original Code is AGNITAS AG. All portions of
 * the code written by AGNITAS AG are Copyright (c) 2007 AGNITAS AG. All Rights
 * Reserved.
 * 
 * Contributor(s): AGNITAS AG. 
 ********************************************************************************/
package org.agnitas.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.Statement;
import java.util.Map;

import org.agnitas.util.AgnUtils;
import org.apache.log4j.Logger;

public class LoggingEnhBasicDataSource extends EnhBasicDataSource {
	private static long count = 0L;
	private Logger _logger = Logger.getLogger( LoggingEnhBasicDataSource.class );
	
	private class LoggingConnection implements Connection {
		private long _id = 0;
		private Connection _connection = null;
		public LoggingConnection( long id, Connection connection ) {
			_id = id;
			_connection = connection;
		}
		public void clearWarnings() throws SQLException {
			_connection.clearWarnings();
		}
		public void close() throws SQLException {
			_logger.info( System.currentTimeMillis() + "\tclose\t" + getId() + "\t" + getStackTrace( new Exception() ) );
			_connection.close();
		}
		public void commit() throws SQLException {
			_connection.commit();
		}
		public Statement createStatement() throws SQLException {
			return _connection.createStatement();
		}
		public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
			return _connection.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
		}
		public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
			return _connection.createStatement(resultSetType, resultSetConcurrency);
		}
		public boolean getAutoCommit() throws SQLException {
			return _connection.getAutoCommit();
		}
		public String getCatalog() throws SQLException {
			return _connection.getCatalog();
		}
		public int getHoldability() throws SQLException {
			return _connection.getHoldability();
		}
		public DatabaseMetaData getMetaData() throws SQLException {
			return _connection.getMetaData();
		}
		public int getTransactionIsolation() throws SQLException {
			return _connection.getTransactionIsolation();
		}
		public Map<String, Class<?>> getTypeMap() throws SQLException {
			return _connection.getTypeMap();
		}
		public SQLWarning getWarnings() throws SQLException {
			return _connection.getWarnings();
		}
		public boolean isClosed() throws SQLException {
			return _connection.isClosed();
		}
		public boolean isReadOnly() throws SQLException {
			return _connection.isReadOnly();
		}
		public String nativeSQL(String sql) throws SQLException {
			return _connection.nativeSQL(sql);
		}
		public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
			return _connection.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
		}
		public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
			return _connection.prepareCall(sql, resultSetType, resultSetConcurrency);
		}
		public CallableStatement prepareCall(String sql) throws SQLException {
			return _connection.prepareCall(sql);
		}
		public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
			return _connection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
		}
		public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
			return _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
		}
		public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
			return _connection.prepareStatement(sql, autoGeneratedKeys);
		}
		public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
			return _connection.prepareStatement(sql, columnIndexes);
		}
		public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
			return _connection.prepareStatement(sql, columnNames);
		}
		public PreparedStatement prepareStatement(String sql) throws SQLException {
			return _connection.prepareStatement(sql);
		}
		public void releaseSavepoint(Savepoint savepoint) throws SQLException {
			_connection.releaseSavepoint(savepoint);
		}
		public void rollback() throws SQLException {
			_connection.rollback();
		}
		public void rollback(Savepoint savepoint) throws SQLException {
			_connection.rollback(savepoint);
		}
		public void setAutoCommit(boolean autoCommit) throws SQLException {
			_connection.setAutoCommit(autoCommit);
		}
		public void setCatalog(String catalog) throws SQLException {
			_connection.setCatalog(catalog);
		}
		public void setHoldability(int holdability) throws SQLException {
			_connection.setHoldability(holdability);
		}
		public void setReadOnly(boolean readOnly) throws SQLException {
			_connection.setReadOnly(readOnly);
		}
		public Savepoint setSavepoint() throws SQLException {
			return _connection.setSavepoint();
		}
		public Savepoint setSavepoint(String name) throws SQLException {
			return _connection.setSavepoint(name);
		}
		public void setTransactionIsolation(int level) throws SQLException {
			_connection.setTransactionIsolation(level);
		}
		public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
			_connection.setTypeMap(map);
		}
		public long getId() {
			return _id;
		}
		
	}
	
	/* (non-Javadoc)
	 * @see org.apache.commons.dbcp.BasicDataSource#getConnection()
	 */
	@Override
	public Connection getConnection() throws SQLException {
		LoggingConnection connection = new LoggingConnection( count++, super.getConnection() );
		_logger.info( System.currentTimeMillis() + "\tgetConnection\t" + connection.getId() + "\t" + getStackTrace( new Exception() ) );
		return connection;
	}

	/* (non-Javadoc)
	 * @see org.apache.commons.dbcp.BasicDataSource#getConnection(java.lang.String, java.lang.String)
	 */
	@Override
	public Connection getConnection(String arg0, String arg1) throws SQLException {
		LoggingConnection connection = new LoggingConnection( count++, super.getConnection(arg0, arg1) );
		_logger.info( System.currentTimeMillis() + "\tgetConnection\t" + connection.getId() + "\t" + getStackTrace( new Exception() ) );
		return connection;
	}
	
	/**
     * Getter for property stackTrace.
     * 
     * @return Value of property stackTrace.
     */
    public static String getStackTrace(Exception e) {
        String trace="";
        StackTraceElement[] st=e.getStackTrace();

        for(int c=0; c < st.length && c < 10; c++) {
            trace+=st[c].toString()+"\t";
        }
        return trace;
    }

}
